AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: https://github.com/monken/aws-ecr-public

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: Configuration }
        Parameters:
          - Authorizer
          - ImageUri
      - Label: { default: Basic Authentication }
        Parameters:
          - AuthBasicUsername
          - AuthBasicPassword
      - Label: { default: Custom Lambda Authentication }
        Parameters:
          - AuthCustomLambdaArn
    ParameterLabels:
      AuthBasicUsername: { default: Username }
      AuthBasicPassword: { default: Password }
      AuthCustomLambdaArn: { default: Lambda ARN }
      ImageUri: {default: Lambda Image Uri}


Parameters:
  Authorizer:
    Type: String
    Default: NONE
    AllowedValues: [NONE, BASIC, CUSTOM]
    Description: Add an authorizer to your registry. Make sure to provide details below.
  
  ImageUri:
    Type: String
    Default: ''
    Description: Provide the full image uri of docker image stored in ECR. <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<repository-name>@<image-digest>

  AuthBasicUsername:
    Type: String
    Default: ''

  AuthBasicPassword:
    Type: String
    Default: ''
    NoEcho: true

  AuthCustomLambdaArn:
    Type: String
    Default: ''
    Description: Provide the full ARN to a custom authorizer function. Permissions will be added automatically.

Conditions:
  HasAuthorizer: !Not [ !Equals [ !Ref Authorizer, NONE ] ]
  HasCustomAuthorizer: !Equals [ !Ref Authorizer, CUSTOM ]

Resources:
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayRole:
    Type: AWS::ApiGateway::Account
    DependsOn: Api
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${AWS::StackName}/accesslog
      RetentionInDays: 7

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v2
      DefinitionBody: !Include api.openapi.yml
      EndpointConfiguration: REGIONAL
      MinimumCompressionSize: 0
      TracingEnabled: true
      OpenApiVersion: '3.0.1'
      # trigger a redeployment of the Authorizer changes
      BinaryMediaTypes: [!Ref Authorizer]
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format:
          # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference
          Fn::Stringify:
            requestId: $context.requestId
            ip: $context.identity.sourceIp
            caller: $context.identity.caller
            userArn: $context.identity.userArn
            requestTimeEpoch: $context.requestTimeEpoch
            httpMethod: $context.httpMethod
            resourcePath: $context.resourcePath
            path: $context.path
            status: $context.status
            protocol: $context.protocol
            responseLength: $context.responseLength
            responseLatency: $context.responseLatency
            integrationLatency: $context.integrationLatency
            error: $context.error

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      MemorySize: 5000
      Timeout: 120
      ImageUri: !Ref ImageUri
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Api

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Condition: HasAuthorizer
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      InlineCode: !Include { type: string, location: authorizer-lambda/authorizer.js }
      Timeout: 30
      Environment:
        Variables:
          BASIC_USER: !Ref AuthBasicUsername
          BASIC_PASSWORD: !Ref AuthBasicPassword
          METHOD: !Ref Authorizer

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Condition: HasAuthorizer
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !If [ HasCustomAuthorizer, !Ref AuthCustomLambdaArn, !GetAtt AuthorizerFunction.Arn ]
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/authorizers/*


Outputs:
  ApiDomainName:
    Value: !Sub ${Api}.execute-api.${AWS::Region}.amazonaws.com
    Export:
      Name: !Sub ${AWS::StackName}:ApiDomainName
  LambdaExecutionRoleName:
    Value: !Ref ApiFunctionRole
    Export:
      Name: !Sub ${AWS::StackName}:LambdaExecutionRoleName
